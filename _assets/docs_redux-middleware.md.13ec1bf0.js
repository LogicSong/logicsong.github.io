import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"redux系列二：redux中间件实现原理","frontmatter":{"date":"2022-01-06","title":"redux系列二：redux中间件实现原理","tags":["react","redux"],"describe":"中间件是redux的精华部分,让我们看看它的精妙原理"},"headers":[{"level":2,"title":"redux中间件原理","slug":"redux中间件原理"},{"level":3,"title":"redux中间件中使用的聚合函数(Compose)","slug":"redux中间件中使用的聚合函数-compose"},{"level":3,"title":"redux中间件实现原理","slug":"redux中间件实现原理"},{"level":3,"title":"MiddleWare","slug":"middleware"}],"relativePath":"docs/redux-middleware.md","lastUpdated":1641468462851.1736}';var p={};const o=a('<h2 id="redux中间件原理"><a class="header-anchor" href="#redux中间件原理" aria-hidden="true">#</a> redux中间件原理</h2><h3 id="redux中间件中使用的聚合函数-compose"><a class="header-anchor" href="#redux中间件中使用的聚合函数-compose" aria-hidden="true">#</a> redux中间件中使用的聚合函数(Compose)</h3><p>先看几个函数</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn1:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn3:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如何执行这三个函数?</p><div class="language-js"><pre><code><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">)</span>\n<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">)</span>\n<span class="token function">fn3</span><span class="token punctuation">(</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>这样很啰嗦,优化一下</p><div class="language-js"><pre><code><span class="token comment">// 先将函数改写一下,使其返回改写后的参数</span>\n<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn1:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> args <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn3:&#39;</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>现在可以这样调用:</p><div class="language-js"><pre><code><span class="token function">f1</span><span class="token punctuation">(</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>还是不够友好,能否将三个函数聚合成一个函数,然后直接调用聚合后的函数即可?</p><p>可以!下面就是聚合函数的实现,redux中的中间件就是用compose函数聚合的.</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">funcArray<span class="token operator">:</span> Function<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token parameter">args</span> <span class="token operator">=&gt;</span> args\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> funcArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> funcArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token function">cur</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="redux中间件实现原理"><a class="header-anchor" href="#redux中间件实现原理" aria-hidden="true">#</a> redux中间件实现原理</h3><h4 id="先看applymiddleware"><a class="header-anchor" href="#先看applymiddleware" aria-hidden="true">#</a> 先看applyMiddleWare</h4><p>使用</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">&#39;redux-thunk&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> reducers <span class="token keyword">from</span> <span class="token string">&#39;./reducers&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>首先明确一点:applyMiddleware在创建store时就调用了,看看源码它做了什么,返回了什么.</p><div class="language-js"><pre><code><span class="token comment">// 核心源码</span>\n<span class="token comment">// 接受多个中间件(函数),返回一个函数</span>\n<span class="token function">applyMiddleware</span><span class="token punctuation">(</span>\n  <span class="token operator">...</span>middlewares<span class="token operator">:</span> Middleware<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> StoreEnhancer<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 返回一个函数,该函数的参数是createStore,返回值是改写原store</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">createStore<span class="token operator">:</span> StoreEnhancerStoreCreator</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name">AnyAction</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n      <span class="token parameter">reducer<span class="token operator">:</span> Reducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n      preloadedState<span class="token operator">?</span><span class="token operator">:</span> PreloadedState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span>\n    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">)</span>\n      <span class="token keyword">let</span> dispatch<span class="token operator">:</span> <span class="token function-variable function">Dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n          <span class="token string">&#39;Dispatching while constructing your middleware is not allowed. &#39;</span> <span class="token operator">+</span>\n            <span class="token string">&#39;Other middleware would not be applied to this dispatch.&#39;</span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token keyword">const</span> middlewareAPI<span class="token operator">:</span> MiddlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span>\n        getState<span class="token operator">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>\n        <span class="token comment">// dispatch</span>\n        <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 中间件的第一层函数是在这里调用的</span>\n      <span class="token keyword">const</span> chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">middleware</span> <span class="token operator">=&gt;</span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token comment">// 使用compose进行聚合</span>\n      dispatch <span class="token operator">=</span> compose<span class="token operator">&lt;</span><span class="token keyword">typeof</span> dispatch<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span>\n    <span class="token comment">// 可以看到,返回值与原store唯一的区别就是改写(增强)了dispatch,这便是applyMiddleWare的作用</span>\n    <span class="token comment">// 也是中间件最终的目的</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        <span class="token operator">...</span>store<span class="token punctuation">,</span>\n        dispatch\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="总结一下applymiddle"><a class="header-anchor" href="#总结一下applymiddle" aria-hidden="true">#</a> 总结一下applyMiddle</h5><ul><li>首先,它是一个三箭头函数,接受多个中间件(函数),返回一个双箭头函数</li><li>最下层的返回值函数,它的参数是createStore,它的返回值是改写原store</li><li>最下层返回值函数的返回值,实际上就是用createStore创建原store,然后通过中间件将dispatch增强,然后再将新的store作为返回值</li><li>中间件的第一层函数是在这里调用的,并将调用返回的函数用compose函数聚合</li></ul><h4 id="createstore做了什么"><a class="header-anchor" href="#createstore做了什么" aria-hidden="true">#</a> createStore做了什么</h4><p>除了上文说的,源码中的createStore实际上首先看入参里有没有enhancer(applyMiddleware的执行结果),如果有则执行enhancer:</p><div class="language-js"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Expected the enhancer to be a function. Instead, received: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">kindOf</span><span class="token punctuation">(</span>\n          enhancer\n        <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">enhancer</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span><span class="token punctuation">(</span>\n      reducer<span class="token punctuation">,</span>\n      preloadedState <span class="token keyword">as</span> PreloadedState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span> <span class="token keyword">as</span> Store<span class="token operator">&lt;</span>ExtendState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> StateExt<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">,</span> StateExt<span class="token punctuation">,</span> Ext<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Ext\n  <span class="token punctuation">}</span>\n</code></pre></div><h3 id="middleware"><a class="header-anchor" href="#middleware" aria-hidden="true">#</a> MiddleWare</h3><h4 id="middleware长什么样"><a class="header-anchor" href="#middleware长什么样" aria-hidden="true">#</a> MiddleWare长什么样?</h4><div class="language-js"><pre><code><span class="token comment">// Middleware written as ES5 functions</span>\n<span class="token comment">// Outer function:</span>\n<span class="token keyword">function</span> <span class="token function">exampleMiddleware</span><span class="token punctuation">(</span><span class="token parameter">storeAPI</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapDispatch</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Do anything here: pass the action onwards with next(action),</span>\n      <span class="token comment">// or restart the pipeline with storeAPI.dispatch(action)</span>\n      <span class="token comment">// Can also use storeAPI.getState() here</span>\n\n      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>最外层就是middleware本身,它在applyMiddleware中被调用<code>const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</code>,当我们在业务代码中调用dispatch时就会将action派发到第一个middleware.只执行一遍</li><li>wrapDispatch:(官方文档中写This function is actually the next middleware in the pipeline.)该函数也是在applyMiddleware中调用<code>dispatch = compose&lt;typeof dispatch&gt;(...chain)(store.dispatch)</code>,最后一个middleware中的next就是strore.dispatch.只执行一遍.</li><li>handleAction: 每次dispatch都会触发,接受action参数.</li></ul><h4 id="动手写一个logger中间件"><a class="header-anchor" href="#动手写一个logger中间件" aria-hidden="true">#</a> 动手写一个logger中间件</h4><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">loggerMiddleware</span> <span class="token operator">=</span> <span class="token parameter">storeAPI</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dispatching&#39;</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;next state&#39;</span><span class="token punctuation">,</span> storeAPI<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div>',30);p.render=function(a,t,p,e,c,l){return s(),n("div",null,[o])};export default p;export{t as __pageData};
