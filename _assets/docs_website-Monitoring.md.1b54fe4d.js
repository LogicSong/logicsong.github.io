import{g as n,f as a,j as s,G as e}from"./common-bec3f312.js";const t='{"title":"网站监控笔记（一） — Performance","frontmatter":{"date":"2021-01-29","title":"网站监控笔记（一） — Performance","tags":["监控","性能优化"],"describe":"网站监控是到底是监控的啥？我们为什么要监控？"},"headers":[{"level":2,"title":"What is website monitoring?","slug":"what-is-website-monitoring"},{"level":2,"title":"主要作用","slug":"主要作用"},{"level":2,"title":"如何做？","slug":"如何做？"},{"level":2,"title":"Go！","slug":"go！"},{"level":2,"title":"网站性能监听","slug":"网站性能监听"},{"level":2,"title":"什么是 performance ？","slug":"什么是-performance-？"},{"level":2,"title":"performance 属性","slug":"performance-属性"},{"level":3,"title":"performance.timing","slug":"performance-timing"},{"level":3,"title":"performance.navigation","slug":"performance-navigation"},{"level":3,"title":"performance.resourcetimingbufferfull","slug":"performance-resourcetimingbufferfull"},{"level":2,"title":"performance 方法","slug":"performance-方法"},{"level":3,"title":"performance.now()","slug":"performance-now"},{"level":3,"title":"performance.getEntries()","slug":"performance-getentries"},{"level":3,"title":"performance.mark()","slug":"performance-mark"},{"level":3,"title":"performance.measure()","slug":"performance-measure"},{"level":3,"title":"performance.clearMarks()","slug":"performance-clearmarks"},{"level":3,"title":"小demo","slug":"小demo"},{"level":2,"title":"总结","slug":"总结"},{"level":2,"title":"实战一波","slug":"实战一波"},{"level":2,"title":"注解地址","slug":"注解地址"}],"relativePath":"docs/website-Monitoring.md","lastUpdated":1640055064601.7383}';var p={};const o=s("iframe",{frameborder:"no",border:"0",marginwidth:"0",marginheight:"0",width:"100%",height:"100",src:"//music.163.com/outchain/player?type=2&id=28613314&auto=0&height=66"},null,-1),c=e('<h2 id="what-is-website-monitoring"><a class="header-anchor" href="#what-is-website-monitoring" aria-hidden="true">#</a> What is website monitoring?</h2><p>什么是<code>网站监控</code>？其实我们主要是实时监控<code>网站性能</code>，是否存在<code>异常资源</code>、<code>请求</code>、<code>代码出错</code> 、<code>页面加载消耗时长</code> 等 一系列问题！如果出现这些问题，你能不能及时定位问题原因? 在之前的 <a href="http://blog.lovemysoul.vip/docs/vue-Optimize.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%98%E5%8C%96%EF%BC%9F" target="_blank" rel="noopener noreferrer">《如何优化祖传代码》</a> 这篇文章中我也有讲到<code>客户流失率</code>，感兴趣的同学可以去看看。只不过是针对于网页打开速度的，那如果你页面请求资源都错误了如 <code>js</code>、 <code>css</code>、<code>request</code> 发生错误了呢？不能及时定位问题，那岂不是GG了。</p><h2 id="主要作用"><a class="header-anchor" href="#主要作用" aria-hidden="true">#</a> 主要作用</h2><ul><li>测DNS污染检测</li><li>网站打开速度检测</li><li>网站资源出现异常</li><li>感知到业务出错的概率</li><li>发布后对性能有否存在影响</li><li>了解业务的稳定性</li><li>对访问用户进行分析</li></ul><h2 id="如何做？"><a class="header-anchor" href="#如何做？" aria-hidden="true">#</a> 如何做？</h2><ol><li>性能监控</li><li>资源异常</li><li>辅助插件</li><li>记录日志</li><li>监控平台</li><li>捕捉异常</li><li>资源阻塞</li></ol><p>今天我们来讲解一下 第一个性能监控（主要是围绕 js 中 performance api讲解）,因为关乎性能方面东西确实太多了</p><h2 id="go！"><a class="header-anchor" href="#go！" aria-hidden="true">#</a> Go！</h2><p><img src="http://img.lovemysoul.vip/images/74d687c76ce9be01bad92404fa2b5f8.png" alt=""></p><h2 id="网站性能监听"><a class="header-anchor" href="#网站性能监听" aria-hidden="true">#</a> 网站性能监听</h2><h2 id="什么是-performance-？"><a class="header-anchor" href="#什么是-performance-？" aria-hidden="true">#</a> 什么是 performance ？</h2><p>我们可以先了解一下 <a href="https://developer.mozilla.org/zh-cn/docs/web/api/performance" target="_blank" rel="noopener noreferrer">Performance [0]</a>，做网站监控必备之一</p><p>MDN 这样描述 Performance :</p><blockquote><p><code>Performance</code> 接口可以获取到当前页面中与性能相关的信息。它是 High Resolution Time API 的一部分，同时也融合了 Performance Timeline API、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API" target="_blank" rel="noopener noreferrer">Navigation Timing API</a>、 <a href="https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API" target="_blank" rel="noopener noreferrer">User Timing API</a> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API" target="_blank" rel="noopener noreferrer">Resource Timing API</a>。</p></blockquote><h2 id="performance-属性"><a class="header-anchor" href="#performance-属性" aria-hidden="true">#</a> performance 属性</h2><p>先看看是个啥东西</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>performance<span class="token punctuation">)</span>\n</code></pre></div><p><img src="http://img.lovemysoul.vip/images/image-20210129154803890.png" alt=""></p><p>可以看到输出了 <code>Performance </code> 对象，里面包含了几个属性，分别是</p><ol><li><s>memory</s> 预期跨浏览器支持不佳。</li></ol><p><img src="http://img.lovemysoul.vip/images/image-20210129164039689.png" alt=""></p><div class="language-js"><pre><code><span class="token comment">// 上下文内可用堆的最大体积，以字节计算。</span>\njsHeapSizeLimit\n<span class="token comment">// 已分配的堆体积，以字节计算。</span>\ntotalJSHeapSize\n<span class="token comment">// 当前 JS 堆活跃段（segment）的体积，以字节计算。</span>\nusedJSHeapSize\n\n</code></pre></div><ol start="2"><li><s>eventCounts</s> 预期跨浏览器支持不佳。</li></ol><hr><ol start="3"><li><p>timing</p></li><li><p>navigation</p></li><li><p>timeOrigin</p></li><li><p>onresourcetimingbufferfull</p></li></ol><p>因为 <code>memory</code> 、<code>与eventCounts</code> 的支持性不是很好，所以我们先略过，感兴趣的朋友可以去 MDN 瞧瞧</p><p><strong>那我们接下来将这四个</strong></p><ul><li><p>timing</p></li><li><p>navigation</p></li><li><p>timeOrigin</p></li><li><p>onresourcetimingbufferfull</p></li></ul><h3 id="performance-timing"><a class="header-anchor" href="#performance-timing" aria-hidden="true">#</a> performance.timing</h3><p>timing 是个啥玩意？</p><p>接着打印一下看看</p><p><img src="http://img.lovemysoul.vip/images/image-20210129160224186.png" alt=""></p><p>大家也可以配合这张图来看看 <img src="http://img.lovemysoul.vip/images/16112863371891.jpg" alt=""></p><p>performance .timing 对象包含延迟相关的性能信息。</p><p>因为东西太多，我们分离一些重要的信息出来讲解</p><div class="language-js"><pre><code><span class="token keyword">let</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>\n页面加载完成所耗时间 <span class="token operator">=</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span>\n解析 <span class="token constant">DOM</span>树 时间 <span class="token operator">=</span> t<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> t<span class="token punctuation">.</span>responseEnd<span class="token punctuation">;</span>\n资源加载完成时间 <span class="token operator">=</span> t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>requestStart\n<span class="token constant">TCP</span>建立连接完成时间 <span class="token operator">=</span> t<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>connectStart\n</code></pre></div><p><strong>作用： 可以监听这些数值，判断网页加载性能</strong></p><p>虽然现在好像要废弃了，但是现在还是可以用的</p><h3 id="performance-navigation"><a class="header-anchor" href="#performance-navigation" aria-hidden="true">#</a> performance.navigation</h3><p>还是来打印一下</p><p><img src="http://img.lovemysoul.vip/images/image-20210129163241241.png" alt=""></p><p>第一个是 <code>redirectCount</code> 是重定向次数</p><p>第二个是 <code>type </code> 判断是页面是从哪里加载的</p><div class="language-js"><pre><code>type\n<span class="token comment">//0：网页通过点击链接、地址栏输入、表单提交、脚本操作等方式加载</span>\n<span class="token comment">//1：网页通过“重新加载”按钮或者location.reload()方法加载</span>\n<span class="token comment">//2：网页通过“前进”或“后退”按钮加载</span>\n<span class="token comment">//255：其他来源的加载</span>\n</code></pre></div><p><strong>作用：可以用作统计网页访问方式及来源，以及是否重定向</strong></p><h3 id="performance-resourcetimingbufferfull"><a class="header-anchor" href="#performance-resourcetimingbufferfull" aria-hidden="true">#</a> performance.resourcetimingbufferfull</h3><p>属性是一个在resourcetimingbufferfull事件触发时会被调用的 event handler 。它的值是一个手动设置的回调函数，这个回调函数会在浏览器的资源时间性能缓冲区满时执行。</p><p><strong>官方例子</strong>：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">buffer_full</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;WARNING: Resource Timing Buffer is FULL!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  performance<span class="token punctuation">.</span><span class="token function">setResourceTimingBufferSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Set a callback if the resource buffer becomes filled</span>\n  performance<span class="token punctuation">.</span>onresourcetimingbufferfull <span class="token operator">=</span> buffer_full<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span>body onload<span class="token operator">=</span><span class="token string">&quot;init()&quot;</span><span class="token operator">&gt;</span>\n</code></pre></div><h2 id="performance-方法"><a class="header-anchor" href="#performance-方法" aria-hidden="true">#</a> performance 方法</h2><p>方法还是很多的</p><p><img src="http://img.lovemysoul.vip/images/image-20210129165609974.png" alt=""></p><p>重点关注几个：</p><h3 id="performance-now"><a class="header-anchor" href="#performance-now" aria-hidden="true">#</a> performance.now()</h3><p>返回当前到页面打开时刻的耗时，精确到千分之一毫秒</p><div class="language-js"><pre><code>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="http://img.lovemysoul.vip/images/image-20210129153807815.png" alt=""></p><p><strong>作用：监控页面资源请求耗时</strong></p><h3 id="performance-getentries"><a class="header-anchor" href="#performance-getentries" aria-hidden="true">#</a> performance.getEntries()</h3><p>对网页发起的所有HTTP请求耗时信息统计后，以数组方式返回</p><div class="language-js"><pre><code>performance<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p><img src="http://img.lovemysoul.vip/images/image-20210129173711265.png" alt=""></p><p><strong>作用：监控请求资源请求耗时</strong></p><h3 id="performance-mark"><a class="header-anchor" href="#performance-mark" aria-hidden="true">#</a> performance.mark()</h3><p>建立测速标记</p><div class="language-js"><pre><code>performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&quot;mySetTimeout-start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="performance-measure"><a class="header-anchor" href="#performance-measure" aria-hidden="true">#</a> performance.measure()</h3><p>用于计算标记之间的时间戳</p><div class="language-js"><pre><code>performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>\n\t<span class="token string">&quot;mySetTimeout&quot;</span><span class="token punctuation">,</span>\n\t<span class="token string">&quot;mySetTimeout-start&quot;</span><span class="token punctuation">,</span>\n\t<span class="token string">&quot;mySetTimeout-end&quot;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="performance-clearmarks"><a class="header-anchor" href="#performance-clearmarks" aria-hidden="true">#</a> performance.clearMarks()</h3><p>清除测速标记</p><div class="language-js"><pre><code>performance<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="小demo"><a class="header-anchor" href="#小demo" aria-hidden="true">#</a> 小demo</h3><p>引用官网例子</p><div class="language-js"><pre><code><span class="token comment">// 以一个标记开始。</span>\nperformance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&quot;mySetTimeout-start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 等待一些时间。</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 标记时间的结束。</span>\n  performance<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">&quot;mySetTimeout-end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 测量两个不同的标记。</span>\n  performance<span class="token punctuation">.</span><span class="token function">measure</span><span class="token punctuation">(</span>\n    <span class="token string">&quot;mySetTimeout&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;mySetTimeout-start&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;mySetTimeout-end&quot;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取所有的测量输出。</span>\n  <span class="token comment">// 在这个例子中只有一个。</span>\n  <span class="token keyword">var</span> measures <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span><span class="token string">&quot;mySetTimeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> measure <span class="token operator">=</span> measures<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout milliseconds:&quot;</span><span class="token punctuation">,</span> measure<span class="token punctuation">.</span>duration<span class="token punctuation">)</span>\n\n  <span class="token comment">// 清除存储的标记</span>\n  performance<span class="token punctuation">.</span><span class="token function">clearMarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  performance<span class="token punctuation">.</span><span class="token function">clearMeasures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>输出 <img src="http://img.lovemysoul.vip/images/1612061312(1).jpg" alt=""></p><p><strong>作用：可以计算某段代码执行速度</strong></p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们在以上的对 <code>performance</code> 的简单了解之后我们可以选择自己需要监控的数据，如xxx资源加载太慢或是页面加载速度进行上报，并记录 log 上报，进行进行日数据归档。下一篇将会讲，如何监听网站资源异常。</p><h2 id="实战一波"><a class="header-anchor" href="#实战一波" aria-hidden="true">#</a> 实战一波</h2><p>我们将前面讲到的所需的可以写成一个监控函数返回一个对象，然后执行上报[1]</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">getPerformanceTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> performance <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> t <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> gather <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token comment">//【重要】页面加载完成的时间</span>\n    <span class="token comment">//【原因】这几乎代表了用户等待页面可用的时间</span>\n    gather<span class="token punctuation">.</span>loadPage <span class="token operator">=</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】解析 DOM 树结构的时间</span>\n    <span class="token comment">//【原因】反省下你的 DOM 树嵌套是不是太多了！</span>\n    gather<span class="token punctuation">.</span>domReady <span class="token operator">=</span> t<span class="token punctuation">.</span>domComplete <span class="token operator">-</span> t<span class="token punctuation">.</span>responseEnd<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】重定向的时间</span>\n    <span class="token comment">//【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com</span>\n    gather<span class="token punctuation">.</span>redirect <span class="token operator">=</span> t<span class="token punctuation">.</span>redirectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>redirectStart<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】DNS 查询时间</span>\n    <span class="token comment">//【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？</span>\n    <span class="token comment">// 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            </span>\n    gather<span class="token punctuation">.</span>lookupDomain <span class="token operator">=</span> t<span class="token punctuation">.</span>domainLookupEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>domainLookupStart<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】读取页面第一个字节的时间</span>\n    <span class="token comment">//【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？</span>\n    <span class="token comment">// TTFB 即 Time To First Byte 的意思</span>\n    <span class="token comment">// 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte</span>\n    gather<span class="token punctuation">.</span>ttfb <span class="token operator">=</span> t<span class="token punctuation">.</span>responseStart <span class="token operator">-</span> t<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】内容加载完成的时间</span>\n    <span class="token comment">//【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？</span>\n    gather<span class="token punctuation">.</span>request <span class="token operator">=</span> t<span class="token punctuation">.</span>responseEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>requestStart<span class="token punctuation">;</span>\n    <span class="token comment">//【重要】执行 onload 回调函数的时间</span>\n    <span class="token comment">//【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？</span>\n    gather<span class="token punctuation">.</span>loadEvent <span class="token operator">=</span> t<span class="token punctuation">.</span>loadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>loadEventStart<span class="token punctuation">;</span>\n    <span class="token comment">// DNS 缓存时间</span>\n    gather<span class="token punctuation">.</span>appcache <span class="token operator">=</span> t<span class="token punctuation">.</span>domainLookupStart <span class="token operator">-</span> t<span class="token punctuation">.</span>fetchStart<span class="token punctuation">;</span>\n    <span class="token comment">// 卸载页面的时间</span>\n    gather<span class="token punctuation">.</span>unloadEvent <span class="token operator">=</span> t<span class="token punctuation">.</span>unloadEventEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>unloadEventStart<span class="token punctuation">;</span>\n    <span class="token comment">// TCP 建立连接完成握手的时间</span>\n    gather<span class="token punctuation">.</span>connect <span class="token operator">=</span> t<span class="token punctuation">.</span>connectEnd <span class="token operator">-</span> t<span class="token punctuation">.</span>connectStart<span class="token punctuation">;</span>\n    <span class="token comment">// 请求资源集合</span>\n    gather<span class="token punctuation">.</span>requestResources <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> gather<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="http://img.lovemysoul.vip/images/1612062279(1).jpg" alt=""></p><h2 id="注解地址"><a class="header-anchor" href="#注解地址" aria-hidden="true">#</a> 注解地址</h2><p>[0] <a href="https://developer.mozilla.org/zh-cn/docs/web/api/performance" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-cn/docs/web/api/performance</a></p><p>[1] <a href="https://blog.csdn.net/p312011150/article/details/93748456" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/p312011150/article/details/93748456</a></p>',86);p.render=function(s,e,t,p,r,l){return a(),n("div",null,[o,c])};export default p;export{t as __pageData};
