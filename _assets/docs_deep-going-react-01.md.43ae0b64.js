import{g as e,f as a,G as t}from"./common-bec3f312.js";const r='{"title":"深入React源码-React的理念","frontmatter":{"date":"2021-04-03","title":"深入React源码-React的理念","tags":["React"],"describe":"深入源码前，看看facebook团队为何要写React框架，了解它做了什么事情"},"headers":[{"level":2,"title":"React理念","slug":"react理念"},{"level":2,"title":"React的解决方案","slug":"react的解决方案"},{"level":3,"title":"CPU瓶颈","slug":"cpu瓶颈"},{"level":3,"title":"IO的瓶颈","slug":"io的瓶颈"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"docs/deep-going-react-01.md","lastUpdated":1640068852611.6514}';var c={};const p=t('<h2 id="react理念"><a class="header-anchor" href="#react理念" aria-hidden="true">#</a> React理念</h2><p>从官网中可以看到React的理念：</p><blockquote><p>我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。</p></blockquote><p>可见，关键是实现快速响应。那么制约快速响应的因素是什么呢？</p><ol><li><p>当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。----CPU瓶颈</p></li><li><p>发送网络请求后，由于需要等待数据返回才能进一步操作导致不能快速响应。----IO的瓶颈</p></li></ol><h2 id="react的解决方案"><a class="header-anchor" href="#react的解决方案" aria-hidden="true">#</a> React的解决方案</h2><h3 id="cpu瓶颈"><a class="header-anchor" href="#cpu瓶颈" aria-hidden="true">#</a> CPU瓶颈</h3><h4 id="浏览器相关基础"><a class="header-anchor" href="#浏览器相关基础" aria-hidden="true">#</a> 浏览器相关基础</h4><p>主流浏览器刷新频率为60Hz，即每（1000ms / 60Hz）16.6ms浏览器刷新一次。</p><p>我们知道，JS可以操作DOM，GUI渲染线程与JS线程是互斥的。所以JS脚本执行和浏览器布局、绘制不能同时执行。</p><p>在每16.6ms时间内，需要完成如下工作：</p><div class="language-"><pre><code>JS脚本执行 -----  样式布局 ----- 样式绘制\n</code></pre></div><p>当JS执行时间过长，超出了16.6ms，这次刷新就没有时间执行样式布局和样式绘制了。具体表现就是页面掉帧，造成卡顿。</p><h4 id="如何解决？"><a class="header-anchor" href="#如何解决？" aria-hidden="true">#</a> 如何解决？</h4><blockquote><p>以下的前提是开启了concurrent mode，即使用ReactDOM.unstable_createRoot()，使用React.render()使用的legacy模式依旧是同步模式</p></blockquote><p>在浏览器每一帧的时间中，预留一些时间给JS线程，React利用这部分时间更新组件（在源码中，预留的初始时间是5ms）。</p><p>当预留的时间不够用时，React将线程控制权交还给浏览器使其有时间渲染UI，React则等待下一帧时间到来继续被中断的工作。</p><p>这样浏览器就有剩余时间执行样式布局和样式绘制，减少掉帧的可能性。</p><p>所以，解决CPU瓶颈的关键是实现时间切片，而时间切片的关键是：<strong>将同步的更新变为可中断的异步更新</strong>。</p><h3 id="io的瓶颈"><a class="header-anchor" href="#io的瓶颈" aria-hidden="true">#</a> IO的瓶颈</h3><p>网络延迟是前端开发者无法解决的。如何在网络延迟客观存在的情况下，减少用户对网络延迟的感知？</p><p>React给出的答案是将人机交互研究的结果整合到真实的 UI 中。</p><p>为此，React实现了Suspense功能及配套的hook——useDeferredValue。</p><p>而在源码内部，为了支持这些特性，同样需要将同步的更新变为可中断的异步更新。</p><h2 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>React为了践行“构建快速响应的大型 Web 应用程序”理念，关键是解决CPU的瓶颈与IO的瓶颈。而落实到实现上，则需要将同步的更新变为<strong>可中断的异步更新</strong>。</p>',26);c.render=function(t,r,c,l,o,d){return a(),e("div",null,[p])};export default c;export{r as __pageData};
