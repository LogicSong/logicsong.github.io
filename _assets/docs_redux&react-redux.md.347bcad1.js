import{g as n,f as s,G as a}from"./common-bec3f312.js";const t='{"title":"redux系列一：redux与react-redux主要API","frontmatter":{"date":"2022-01-05","title":"redux系列一：redux与react-redux主要API","tags":["react","redux"],"describe":null},"headers":[{"level":2,"title":"redux的实现","slug":"redux的实现"},{"level":3,"title":"为什么需要redux，它解决了什么问题","slug":"为什么需要redux，它解决了什么问题"},{"level":3,"title":"redux的简单实现","slug":"redux的简单实现"},{"level":2,"title":"react-redux的实现","slug":"react-redux的实现"},{"level":3,"title":"Provider的源码实现","slug":"provider的源码实现"},{"level":3,"title":"connect的简单实现","slug":"connect的简单实现"}],"relativePath":"docs/redux&react-redux.md","lastUpdated":1641384268002.6345}';var p={};const o=a('<h2 id="redux的实现"><a class="header-anchor" href="#redux的实现" aria-hidden="true">#</a> redux的实现</h2><h3 id="为什么需要redux，它解决了什么问题"><a class="header-anchor" href="#为什么需要redux，它解决了什么问题" aria-hidden="true">#</a> 为什么需要redux，它解决了什么问题</h3><p>React作为一个组件化开发框架，组件之间存在大量通信，有时这些通信跨越多个组件，或者多个组件之间共享一套数据，简单的父子组件间传值不能满足我们的需求，自然而然地，我们需要有一个地方存取和操作这些公共状态。而redux就为我们提供了一种管理公共状态的方案。</p><h3 id="redux的简单实现"><a class="header-anchor" href="#redux的简单实现" aria-hidden="true">#</a> redux的简单实现</h3><div class="language-js"><pre><code><span class="token comment">//store.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./reducer&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reducer</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        \n    <span class="token keyword">let</span> currentState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        \n    <span class="token keyword">let</span> observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">//观察者队列        </span>\n    <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n        <span class="token keyword">return</span> currentState        \n    <span class="token punctuation">}</span>        \n    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n        currentState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>                \n        observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        \n    <span class="token punctuation">}</span>        \n    <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n        observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>        \n    <span class="token punctuation">}</span>        \n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;@@REDUX_INIT&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//初始化store数据        </span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> subscribe<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="react-redux的实现"><a class="header-anchor" href="#react-redux的实现" aria-hidden="true">#</a> react-redux的实现</h2><p>一个组件如果想从store存取公用状态，需要进行四步操作：import引入store、getState获取状态、dispatch修改状态、subscribe订阅更新，代码相对冗余，我们想要合并一些重复的操作，而react-redux就提供了一种合并操作的方案：react-redux提供Provider和connect两个API</p><h3 id="provider的源码实现"><a class="header-anchor" href="#provider的源码实现" aria-hidden="true">#</a> Provider的源码实现</h3><p>Provider的核心是使用React Context API，将state注入到父组件，达到跨层级传递数据的效果。</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Provider</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> Action <span class="token operator">=</span> AnyAction<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  store<span class="token punctuation">,</span>\n  context<span class="token punctuation">,</span>\n  children<span class="token punctuation">,</span>\n  serverState<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token operator">:</span> ProviderProps<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token function">createSubscription</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      store<span class="token punctuation">,</span>\n      subscription<span class="token punctuation">,</span>\n      getServerState<span class="token operator">:</span> serverState <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> serverState <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> serverState<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> previousState <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>store<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token function">useIsomorphicLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> subscription <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue\n    subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> subscription<span class="token punctuation">.</span>notifyNestedSubs\n    subscription<span class="token punctuation">.</span><span class="token function">trySubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>previousState <span class="token operator">!==</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      subscription<span class="token punctuation">.</span><span class="token function">notifyNestedSubs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      subscription<span class="token punctuation">.</span><span class="token function">tryUnsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      subscription<span class="token punctuation">.</span>onStateChange <span class="token operator">=</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>contextValue<span class="token punctuation">,</span> previousState<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> Context <span class="token operator">=</span> context <span class="token operator">||</span> ReactReduxContext\n\n  <span class="token comment">// @ts-ignore &#39;AnyAction&#39; is assignable to the constraint of type &#39;A&#39;, but &#39;A&#39; could be instantiated with a different subtype</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Context<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Context<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="connect的简单实现"><a class="header-anchor" href="#connect的简单实现" aria-hidden="true">#</a> connect的简单实现</h3><p>我们已经知道，connect接收mapStateToProps、mapDispatchToProps两个方法，然后返回一个高阶函数，这个高阶函数接收一个组件，返回一个高阶组件（其实就是给传入的组件增加一些属性和功能）connect根据传入的map，将state和dispatch(action)挂载子组件的props上：</p><div class="language-ts"><pre><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>      \n        <span class="token keyword">class</span> <span class="token class-name">Connect</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>        \n            <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n                <span class="token comment">//从context获取store并订阅更新          </span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleStoreChange</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \n            <span class="token punctuation">}</span>       \n            <span class="token function">handleStoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n                <span class="token comment">// 触发更新          </span>\n                <span class="token comment">// 触发的方法有多种,这里为了简洁起见,直接forceUpdate强制更新,读者也可以通过setState来触发子组件更新          </span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        \n            <span class="token punctuation">}</span>        \n            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          \n                <span class="token keyword">return</span> <span class="token punctuation">(</span>            \n                    <span class="token operator">&lt;</span>Component              \n                        <span class="token comment">// 传入该组件的props,需要由connect这个高阶组件原样传回原组件              </span>\n                        <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token punctuation">}</span>              \n                        <span class="token comment">// 根据mapStateToProps把state挂到this.props上              </span>\n                        <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">mapStateToProps</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>               \n                        <span class="token comment">// 根据mapDispatchToProps把dispatch(action)挂到this.props上              </span>\n                        <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span> <span class="token punctuation">}</span>                 \n                    <span class="token operator">/</span><span class="token operator">&gt;</span>              \n                <span class="token punctuation">)</span>        \n            <span class="token punctuation">}</span>      \n        <span class="token punctuation">}</span>      \n        <span class="token comment">//接收context的固定写法      </span>\n        Connect<span class="token punctuation">.</span>contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>        \n            store<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>object      \n        <span class="token punctuation">}</span>      \n        <span class="token keyword">return</span> Connect    \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',13);p.render=function(a,t,p,e,c,u){return s(),n("div",null,[o])};export default p;export{t as __pageData};
